name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: production

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version tag
        run: |
          if [[ ! "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version tag format. Expected: v*.*.* (e.g., v1.0.0)"
            exit 1
          fi

      - name: Check if tag exists in staging
        run: |
          echo "Verifying tag was tested in staging..."
          # Add logic to verify deployment was tested in staging

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: pre-deployment-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: mvn dependency-check:check -DfailBuildOnCVSS=7

      - name: Run Snyk security scan
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-production:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: security-audit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run full test suite
        run: mvn verify

      - name: Build production package
        run: mvn clean package -DskipTests -Pprod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign container image
        if: ${{ vars.ENABLE_IMAGE_SIGNING == 'true' }}
        run: |
          echo "Signing container image with Cosign..."
          # cosign sign ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

  database-migration-dryrun:
    name: Database Migration Dry Run
    runs-on: ubuntu-latest
    needs: build-production
    environment:
      name: production-migration

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Backup production database
        env:
          DB_URL: ${{ secrets.PROD_DB_URL }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          chmod +x scripts/backup-database.sh
          ./scripts/backup-database.sh production pre-deployment

      - name: Run migration dry-run
        env:
          DB_URL: ${{ secrets.PROD_DB_URL }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          mvn flyway:info -Dflyway.url=$DB_URL -Dflyway.user=$DB_USER -Dflyway.password=$DB_PASSWORD
          mvn flyway:validate -Dflyway.url=$DB_URL -Dflyway.user=$DB_USER -Dflyway.password=$DB_PASSWORD

  deploy-production:
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: database-migration-dryrun
    environment:
      name: production
      url: https://www.westbethelmotel.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ vars.CLOUD_PROVIDER == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure GCP credentials
        if: ${{ vars.CLOUD_PROVIDER == 'gcp' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          if [ "${{ vars.CLOUD_PROVIDER }}" == "aws" ]; then
            aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
          elif [ "${{ vars.CLOUD_PROVIDER }}" == "gcp" ]; then
            gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER_NAME }} --region ${{ vars.GCP_REGION }}
          fi

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run database migration
        env:
          DB_URL: ${{ secrets.PROD_DB_URL }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          mvn flyway:migrate -Dflyway.url=$DB_URL -Dflyway.user=$DB_USER -Dflyway.password=$DB_PASSWORD

      - name: Blue-Green Deployment
        run: |
          chmod +x scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh \
            production \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

      - name: Post-deployment health check
        run: |
          max_attempts=60
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f https://www.westbethelmotel.com/actuator/health; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $((attempt+1))/$max_attempts failed, retrying..."
            attempt=$((attempt+1))
            sleep 10
          done
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Run smoke tests
        run: |
          chmod +x scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh https://www.westbethelmotel.com

      - name: Monitor for 1 hour
        run: |
          echo "Monitoring deployment for 1 hour..."
          for i in {1..12}; do
            echo "Health check $i/12 (every 5 minutes)..."
            if ! curl -f https://www.westbethelmotel.com/actuator/health; then
              echo "Health check failed during monitoring period!"
              exit 1
            fi
            if [ $i -lt 12 ]; then
              sleep 300
            fi
          done
          echo "Monitoring complete - deployment stable!"

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            Production deployment of version ${{ steps.version.outputs.version }}

            Deployed at: ${{ github.event.head_commit.timestamp }}
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Notify team on success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Production deployment successful!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *Production Deployment Successful*\n*Version:* ${{ steps.version.outputs.version }}\n*Commit:* ${{ github.sha }}\n*Deployed by:* ${{ github.actor }}\n*URL:* https://www.westbethelmotel.com"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify team on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "URGENT: Production deployment failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rotating_light: *PRODUCTION DEPLOYMENT FAILED*\n*Version:* ${{ steps.version.outputs.version }}\n*Commit:* ${{ github.sha }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Action Required:* Immediate investigation needed"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Auto-rollback on failure
        if: failure()
        run: |
          echo "CRITICAL: Deployment failed, initiating automatic rollback..."
          kubectl rollout undo deployment/motel-booking-app -n production
          kubectl rollout status deployment/motel-booking-app -n production --timeout=10m
          echo "Rollback completed"
