name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

env:
  JAVA_VERSION: '17'

jobs:
  dependency-scan:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache OWASP data
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: ${{ runner.os }}-owasp-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-owasp-

      - name: Run OWASP Dependency Check
        run: mvn dependency-check:check -DfailBuildOnCVSS=0

      - name: Upload OWASP report
        uses: actions/upload-artifact@v3
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check/

      - name: Parse vulnerabilities
        id: parse_vulns
        run: |
          if [ -f "target/dependency-check/dependency-check-report.json" ]; then
            HIGH_COUNT=$(jq '[.dependencies[].vulnerabilities[] | select(.severity=="HIGH")] | length' target/dependency-check/dependency-check-report.json)
            CRITICAL_COUNT=$(jq '[.dependencies[].vulnerabilities[] | select(.severity=="CRITICAL")] | length' target/dependency-check/dependency-check-report.json)
            echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
            echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          else
            echo "high=0" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
          fi

      - name: Create security issues
        if: steps.parse_vulns.outputs.critical > 0 || steps.parse_vulns.outputs.high > 0
        uses: actions/github-script@v7
        with:
          script: |
            const high = ${{ steps.parse_vulns.outputs.high }};
            const critical = ${{ steps.parse_vulns.outputs.critical }};

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Alert: ${critical} Critical and ${high} High Vulnerabilities Found`,
              body: `OWASP Dependency Check found security vulnerabilities:\n\n- Critical: ${critical}\n- High: ${high}\n\nPlease review the dependency-check report and update vulnerable dependencies.`,
              labels: ['security', 'vulnerability']
            });

  container-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t motel-booking:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'motel-booking:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'motel-booking:scan'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload Snyk report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-security-report
          path: snyk-report.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secrets-scan:
    name: GitLeaks Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, snyk-scan, codeql-analysis, secrets-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary report
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "- OWASP Dependency Check: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Trivy Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- Snyk Security Scan: ${{ needs.snyk-scan.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- GitLeaks Secret Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Notify team
        if: failure() || needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Security scan found vulnerabilities!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":warning: *Security Scan Alert*\n*Repository:* ${{ github.repository }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nPlease review the security findings."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
