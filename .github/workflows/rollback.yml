name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      target_version:
        description: 'Target version to rollback to (e.g., v1.0.0) or leave empty for previous deployment'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-rollback-checks:
    name: Pre-Rollback Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate rollback request
        run: |
          echo "========================================="
          echo "ROLLBACK REQUEST"
          echo "========================================="
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Target Version: ${{ github.event.inputs.target_version || 'Previous deployment' }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Initiated by: ${{ github.actor }}"
          echo "========================================="

      - name: Check environment status
        run: |
          echo "Checking current deployment status..."
          # Add logic to verify current deployment state

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ROLLBACK: ${{ github.event.inputs.environment }} - ${{ github.event.inputs.reason }}`,
              body: `## Emergency Rollback Initiated

              **Environment:** ${{ github.event.inputs.environment }}
              **Target Version:** ${{ github.event.inputs.target_version || 'Previous deployment' }}
              **Reason:** ${{ github.event.inputs.reason }}
              **Initiated by:** ${{ github.actor }}
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              This issue was automatically created to track the rollback process.
              `,
              labels: ['rollback', 'incident', 'urgent']
            });

            core.setOutput('issue_number', issue.data.number);

  backup-current-state:
    name: Backup Current State
    runs-on: ubuntu-latest
    needs: pre-rollback-checks
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure cloud credentials
        run: |
          if [ "${{ vars.CLOUD_PROVIDER }}" == "aws" ]; then
            echo "Configuring AWS credentials..."
          elif [ "${{ vars.CLOUD_PROVIDER }}" == "gcp" ]; then
            echo "Configuring GCP credentials..."
          fi

      - name: Backup database
        env:
          DB_URL: ${{ secrets[format('{0}_DB_URL', github.event.inputs.environment)] }}
          DB_USER: ${{ secrets[format('{0}_DB_USER', github.event.inputs.environment)] }}
          DB_PASSWORD: ${{ secrets[format('{0}_DB_PASSWORD', github.event.inputs.environment)] }}
        run: |
          chmod +x scripts/backup-database.sh
          ./scripts/backup-database.sh ${{ github.event.inputs.environment }} pre-rollback-$(date +%Y%m%d-%H%M%S)

      - name: Capture current Kubernetes state
        run: |
          mkdir -p rollback-backup
          kubectl get all -n ${{ github.event.inputs.environment }} -o yaml > rollback-backup/kubernetes-state.yaml
          kubectl describe deployment -n ${{ github.event.inputs.environment }} > rollback-backup/deployment-describe.txt

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rollback-backup-${{ github.event.inputs.environment }}
          path: rollback-backup/
          retention-days: 30

  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: backup-current-state
    environment:
      name: ${{ github.event.inputs.environment }}-rollback

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ vars.CLOUD_PROVIDER == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure GCP credentials
        if: ${{ vars.CLOUD_PROVIDER == 'gcp' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          if [ "${{ vars.CLOUD_PROVIDER }}" == "aws" ]; then
            aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
          elif [ "${{ vars.CLOUD_PROVIDER }}" == "gcp" ]; then
            gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER_NAME }} --region ${{ vars.GCP_REGION }}
          fi

      - name: Rollback to specific version
        if: ${{ github.event.inputs.target_version != '' }}
        run: |
          echo "Rolling back to version ${{ github.event.inputs.target_version }}..."
          kubectl set image deployment/motel-booking-app \
            motel-booking-app=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.target_version }} \
            -n ${{ github.event.inputs.environment }}

      - name: Rollback to previous deployment
        if: ${{ github.event.inputs.target_version == '' }}
        run: |
          echo "Rolling back to previous deployment..."
          kubectl rollout undo deployment/motel-booking-app -n ${{ github.event.inputs.environment }}

      - name: Wait for rollback completion
        run: |
          kubectl rollout status deployment/motel-booking-app \
            -n ${{ github.event.inputs.environment }} \
            --timeout=10m

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          kubectl get pods -n ${{ github.event.inputs.environment }}
          kubectl get deployment motel-booking-app -n ${{ github.event.inputs.environment }}

  post-rollback-validation:
    name: Post-Rollback Validation
    runs-on: ubuntu-latest
    needs: execute-rollback

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for system stabilization
        run: sleep 60

      - name: Health check
        run: |
          ENV_URL=$(if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "https://www.westbethelmotel.com"
          else
            echo "https://staging.westbethelmotel.com"
          fi)

          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f $ENV_URL/actuator/health; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $((attempt+1))/$max_attempts failed, retrying..."
            attempt=$((attempt+1))
            sleep 10
          done
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Run smoke tests
        run: |
          ENV_URL=$(if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "https://www.westbethelmotel.com"
          else
            echo "https://staging.westbethelmotel.com"
          fi)

          if [ -f "scripts/smoke-tests.sh" ]; then
            chmod +x scripts/smoke-tests.sh
            ./scripts/smoke-tests.sh $ENV_URL
          else
            echo "Smoke tests not available"
          fi

      - name: Monitor for stability
        run: |
          ENV_URL=$(if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "https://www.westbethelmotel.com"
          else
            echo "https://staging.westbethelmotel.com"
          fi)

          echo "Monitoring rollback for 15 minutes..."
          for i in {1..3}; do
            echo "Stability check $i/3 (every 5 minutes)..."
            if ! curl -f $ENV_URL/actuator/health; then
              echo "Health check failed during monitoring!"
              exit 1
            fi
            if [ $i -lt 3 ]; then
              sleep 300
            fi
          done
          echo "Rollback stable!"

  notify-rollback:
    name: Notify Rollback Status
    runs-on: ubuntu-latest
    needs: [execute-rollback, post-rollback-validation]
    if: always()

    steps:
      - name: Notify on success
        if: needs.post-rollback-validation.result == 'success'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Rollback completed successfully",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: *Rollback Completed Successfully*\n*Environment:* ${{ github.event.inputs.environment }}\n*Target Version:* ${{ github.event.inputs.target_version || 'Previous deployment' }}\n*Reason:* ${{ github.event.inputs.reason }}\n*Executed by:* ${{ github.actor }}\n*Status:* System is stable"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: needs.post-rollback-validation.result == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "CRITICAL: Rollback failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rotating_light: *ROLLBACK FAILED*\n*Environment:* ${{ github.event.inputs.environment }}\n*Target Version:* ${{ github.event.inputs.target_version || 'Previous deployment' }}\n*Reason:* ${{ github.event.inputs.reason }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*URGENT:* Manual intervention required immediately!"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ROLLBACK ${{ needs.post-rollback-validation.result }}: ${{ github.event.inputs.environment }}
          to: ${{ secrets.ONCALL_EMAIL }}
          from: ${{ secrets.SMTP_FROM }}
          body: |
            Rollback Status: ${{ needs.post-rollback-validation.result }}
            Environment: ${{ github.event.inputs.environment }}
            Target Version: ${{ github.event.inputs.target_version || 'Previous deployment' }}
            Reason: ${{ github.event.inputs.reason }}
            Initiated by: ${{ github.actor }}

            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
