version: '3.8'

# Production Docker Compose Configuration
# This is for reference and local production testing only
# In production, use Kubernetes or ECS orchestration

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: motel-booking-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-motel_booking}
      POSTGRES_USER: ${DB_USER:-moteluser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - motel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-moteluser} -d ${DB_NAME:-motel_booking}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: motel-booking-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - motel-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_VERSION: ${APP_VERSION:-1.0.0}
        SKIP_TESTS: "true"
    image: motel-booking-app:production
    container_name: motel-booking-app-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod
      SPRING_APPLICATION_NAME: motel-booking-system

      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-motel_booking}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-moteluser}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000

      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: "false"
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE: 20

      # Flyway Configuration
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"

      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_REDIS_TIMEOUT: 2000

      # Cache Configuration
      SPRING_CACHE_TYPE: redis
      SPRING_CACHE_REDIS_TIME_TO_LIVE: 3600000

      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 86400000
      MFA_ENABLED: "true"
      RATE_LIMIT_ENABLED: "true"

      # Email Configuration
      SPRING_MAIL_HOST: ${SMTP_HOST}
      SPRING_MAIL_PORT: ${SMTP_PORT:-587}
      SPRING_MAIL_USERNAME: ${SMTP_USERNAME}
      SPRING_MAIL_PASSWORD: ${SMTP_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"

      # Monitoring Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,metrics,prometheus,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
      MANAGEMENT_TRACING_ENABLED: "true"

      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_WESTBETHEL: INFO
      LOGGING_FILE_NAME: /var/log/motel-booking/application.log
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

      # Application Configuration
      SERVER_PORT: 8080
      SERVER_SHUTDOWN: graceful
      SPRING_LIFECYCLE_TIMEOUT_PER_SHUTDOWN_PHASE: 30s

    ports:
      - "${APP_PORT:-8080}:8080"
      - "${MANAGEMENT_PORT:-8081}:8081"
    volumes:
      - app_logs:/var/log/motel-booking
    networks:
      - motel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp/motel-booking

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: motel-booking-nginx-prod
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - motel-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: motel-booking-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus-alerts.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - motel-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: motel-booking-grafana-prod
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    networks:
      - motel-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

networks:
  motel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Production Deployment Notes:
# 1. Use docker-compose.production.yml for local testing only
# 2. For production, deploy to Kubernetes or AWS ECS
# 3. Ensure all secrets are provided via environment variables
# 4. Configure SSL certificates in nginx/ssl directory
# 5. Set up proper backup strategies for volumes
# 6. Monitor resource usage and adjust limits accordingly
# 7. Use external managed services for database in true production
