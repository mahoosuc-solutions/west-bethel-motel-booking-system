# Google Cloud Build Configuration
# Automated CI/CD pipeline for building and deploying to Cloud Run
# Triggers on push to main branch

steps:
  # Step 1: Run tests with Maven
  - name: 'maven:3.9.6-eclipse-temurin-17'
    id: 'test'
    entrypoint: 'mvn'
    args:
      - 'clean'
      - 'test'
      - '-B'
      - '-DskipTests=false'
      - '-Dspring.profiles.active=test'
    env:
      - 'MAVEN_OPTS=-Xmx2048m'

  # Step 2: Build application JAR
  - name: 'maven:3.9.6-eclipse-temurin-17'
    id: 'build'
    entrypoint: 'mvn'
    args:
      - 'clean'
      - 'package'
      - '-B'
      - '-DskipTests=true'
      - '-Pprod'
    env:
      - 'MAVEN_OPTS=-Xmx2048m'
    waitFor: ['test']

  # Step 3: Build Docker image using Cloud Build
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/motel-booking-system:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/motel-booking-system:latest'
      - '-f'
      - 'Dockerfile.production'
      - '--build-arg'
      - 'SKIP_TESTS=true'
      - '.'
    waitFor: ['build']

  # Step 4: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/motel-booking-system:$COMMIT_SHA'
    waitFor: ['docker-build']

  # Step 5: Push latest tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push-latest'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/motel-booking-system:latest'
    waitFor: ['docker-build']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'motel-booking-system'
      - '--image=gcr.io/$PROJECT_ID/motel-booking-system:$COMMIT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--timeout=${_TIMEOUT}'
      - '--concurrency=${_CONCURRENCY}'
      - '--min-instances=${_MIN_INSTANCES}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--port=8080'
      - '--set-env-vars=SPRING_PROFILES_ACTIVE=gcp'
      - '--set-env-vars=GCP_PROJECT_ID=$PROJECT_ID'
      - '--add-cloudsql-instances=${_CLOUD_SQL_CONNECTION_NAME}'
      - '--set-secrets=DATABASE_USERNAME=${_DB_USERNAME_SECRET}:latest'
      - '--set-secrets=DATABASE_PASSWORD=${_DB_PASSWORD_SECRET}:latest'
      - '--set-secrets=JWT_SECRET=${_JWT_SECRET}:latest'
      - '--set-secrets=REDIS_PASSWORD=${_REDIS_PASSWORD_SECRET}:latest'
      - '--set-secrets=MAIL_USERNAME=${_MAIL_USERNAME_SECRET}:latest'
      - '--set-secrets=MAIL_PASSWORD=${_MAIL_PASSWORD_SECRET}:latest'
      - '--service-account=${_SERVICE_ACCOUNT}'
      - '--vpc-connector=${_VPC_CONNECTOR}'
      - '--vpc-egress=${_VPC_EGRESS}'
    waitFor: ['docker-push', 'docker-push-latest']

  # Step 7: Verify deployment health
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe motel-booking-system --region=${_REGION} --format='value(status.url)')
        echo "Service URL: $SERVICE_URL"

        # Wait for service to be ready
        for i in {1..30}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/actuator/health/readiness" || echo "000")
          echo "Health check attempt $i/30: HTTP $HTTP_CODE"

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✓ Service is healthy!"
            exit 0
          fi

          sleep 10
        done

        echo "⚠ Service did not become healthy within timeout"
        exit 1
    waitFor: ['deploy']

# Build timeout
timeout: 1800s

# Substitution variables with defaults
substitutions:
  _REGION: 'us-central1'
  _MEMORY: '1Gi'
  _CPU: '1'
  _TIMEOUT: '300'
  _CONCURRENCY: '80'
  _MIN_INSTANCES: '1'
  _MAX_INSTANCES: '10'
  _VPC_EGRESS: 'private-ranges-only'
  # These must be provided via trigger configuration
  _CLOUD_SQL_CONNECTION_NAME: 'PROJECT_ID:REGION:INSTANCE_NAME'
  _DB_USERNAME_SECRET: 'db-username'
  _DB_PASSWORD_SECRET: 'db-password'
  _JWT_SECRET: 'jwt-secret'
  _REDIS_PASSWORD_SECRET: 'redis-password'
  _MAIL_USERNAME_SECRET: 'mail-username'
  _MAIL_PASSWORD_SECRET: 'mail-password'
  _SERVICE_ACCOUNT: 'motel-booking@PROJECT_ID.iam.gserviceaccount.com'
  _VPC_CONNECTOR: 'projects/PROJECT_ID/locations/REGION/connectors/vpc-connector'

# Images to store in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/motel-booking-system:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/motel-booking-system:latest'

# Options
options:
  # Use high-performance machine type for faster builds
  machineType: 'E2_HIGHCPU_8'

  # Enable logging
  logging: CLOUD_LOGGING_ONLY

  # Disk size for build
  diskSizeGb: 100

  # Enable substitution validation
  substitutionOption: 'ALLOW_LOOSE'

  # Dynamic substitutions
  dynamic_substitutions: true

# Tags for organizing builds
tags:
  - 'motel-booking-system'
  - 'cloud-run'
  - 'production'
