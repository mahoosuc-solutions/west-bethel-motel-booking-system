# Google Cloud Platform Profile Configuration
# Optimized for Cloud Run deployment with Cloud SQL and GCP services
# All sensitive values MUST be provided via environment variables or Secret Manager

spring:
  application:
    name: motel-booking-system

  # Cloud SQL Configuration (Unix Socket Connection)
  # Using Cloud SQL Proxy built into Cloud Run
  datasource:
    # Cloud SQL instance connection format: /cloudsql/PROJECT_ID:REGION:INSTANCE_NAME
    url: jdbc:postgresql:///${CLOUD_SQL_DATABASE_NAME:motel_booking}?cloudSqlInstance=${CLOUD_SQL_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

    # HikariCP Connection Pool Configuration (Cloud Run optimized)
    hikari:
      # Smaller pool for Cloud Run (serverless, auto-scaled instances)
      maximum-pool-size: ${DB_POOL_MAX_SIZE:5}
      minimum-idle: ${DB_POOL_MIN_IDLE:1}
      connection-timeout: ${DB_POOL_TIMEOUT:10000}
      idle-timeout: ${DB_POOL_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_POOL_MAX_LIFETIME:600000}
      pool-name: MotelBookingGCPPool
      auto-commit: false
      leak-detection-threshold: ${DB_LEAK_DETECTION:30000}
      connection-test-query: SELECT 1
      validation-timeout: ${DB_VALIDATION_TIMEOUT:3000}
      # Cloud SQL specific settings
      connection-init-sql: SELECT 1

  # Redis Configuration (Google Cloud Memorystore)
  cache:
    type: redis

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      ssl:
        enabled: ${REDIS_SSL_ENABLED:true}
      timeout: ${REDIS_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_CONNECT_TIMEOUT:2000ms}
      client-type: ${REDIS_CLIENT_TYPE:lettuce}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:5}
          max-idle: ${REDIS_POOL_MAX_IDLE:5}
          min-idle: ${REDIS_POOL_MIN_IDLE:1}
          max-wait: ${REDIS_POOL_MAX_WAIT:2000ms}

  # JPA/Hibernate Configuration
  jpa:
    show-sql: false
    open-in-view: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: false
        jdbc:
          batch_size: 20
          fetch_size: 50
        order_inserts: true
        order_updates: true
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
        connection:
          provider_disables_autocommit: true

  # Flyway Database Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    validate-on-migrate: true
    locations: classpath:db/migration
    baseline-version: 0
    encoding: UTF-8
    out-of-order: false

  # Email Configuration (SendGrid recommended for GCP)
  mail:
    host: ${MAIL_HOST:smtp.sendgrid.net}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# Cloud Logging Configuration (Google Cloud Logging)
logging:
  level:
    root: INFO
    com.westbethel.motel_booking: INFO
    org.springframework: WARN
    org.springframework.security: INFO
    org.hibernate: WARN
    org.hibernate.SQL: WARN
    # GCP specific loggers
    com.google.cloud: INFO
  pattern:
    # JSON format for Cloud Logging structured logs
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n'
  # Cloud Run logs to stdout/stderr automatically captured by Cloud Logging

# Actuator/Management Configuration (Cloud Run Health Checks)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      environment: gcp
      project: ${GCP_PROJECT_ID:unknown}
      service: ${K_SERVICE:motel-booking-system}
      revision: ${K_REVISION:unknown}
    export:
      # Cloud Monitoring (Stackdriver) integration
      prometheus:
        enabled: true
      stackdriver:
        enabled: ${STACKDRIVER_ENABLED:false}
        project-id: ${GCP_PROJECT_ID}
        resource-type: ${STACKDRIVER_RESOURCE_TYPE:cloud_run_revision}

# Server Configuration (Cloud Run optimized)
server:
  # Cloud Run provides PORT environment variable
  port: ${PORT:8080}
  forward-headers-strategy: framework
  shutdown: graceful

  # Error handling - secure for production
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
    whitelabel:
      enabled: false

  # Performance optimizations
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml

  http2:
    enabled: true

  # Connection timeout settings (Cloud Run optimized)
  tomcat:
    connection-timeout: ${TOMCAT_CONNECTION_TIMEOUT:10000}
    threads:
      # Smaller thread pool for Cloud Run
      max: ${TOMCAT_MAX_THREADS:50}
      min-spare: ${TOMCAT_MIN_SPARE_THREADS:5}
    max-connections: ${TOMCAT_MAX_CONNECTIONS:5000}
    accept-count: ${TOMCAT_ACCEPT_COUNT:50}

# Graceful shutdown for Cloud Run
spring.lifecycle.timeout-per-shutdown-phase: 25s

# GCP Specific Configuration
gcp:
  project:
    id: ${GCP_PROJECT_ID}

  # Cloud SQL configuration
  sql:
    connection-name: ${CLOUD_SQL_CONNECTION_NAME}
    database-name: ${CLOUD_SQL_DATABASE_NAME:motel_booking}

  # Secret Manager integration (optional)
  secret-manager:
    enabled: ${GCP_SECRET_MANAGER_ENABLED:false}
    project-id: ${GCP_PROJECT_ID}

  # Cloud Storage configuration (optional - for file uploads)
  storage:
    enabled: ${GCP_STORAGE_ENABLED:false}
    bucket-name: ${GCP_STORAGE_BUCKET}

  # Cloud Pub/Sub configuration (optional - for async messaging)
  pubsub:
    enabled: ${GCP_PUBSUB_ENABLED:false}
    project-id: ${GCP_PROJECT_ID}
